#-*- mode: org -*-
#+TITLE: Emacs-Settings
#+STARTUP: showall
#+Author: Jan Quest

* Into
Here you can find my emacs settings. They have been masively inspired by https://github.com/magnars.
You should definately check out his .emacs.d repo for more awesome stuff. magnars/.emacs.d
As a starting point I used his files and combined them into one file using org-mode.
This way I have access to all the configurations in one spot. 

* Turn off mouse interface early in startup to avoid momentary display
#+begin_src emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

* Packages
#+begin_src emacs-lisp
(package-initialize)
#+end_src

* Remove security vulnerability
#+begin_src emacs-lisp
(eval-after-load "enriched"
  '(defun enriched-decode-display-prop (start end &optional param)
     (list start end)))
#+end_src

* No spash screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

* Set Path to dependencies
#+begin_src emacs-lisp
(setq site-lisp-dir
      (expand-file-name "site-lisp" user-emacs-directory))

(setq settings-dir
      (expand-file-name "settings" user-emacs-directory))
#+end_src

* Load Path
#+begin_src emacs-lisp
(add-to-list 'load-path settings-dir)
(add-to-list 'load-path site-lisp-dir)
#+end_src

* Keep emcas custom-settings in sepeate file
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Set up appearance early
#+begin_src emacs-lisp
(setq font-lock-maximum-decoration t
      color-theme-is-global t
      truncate-partial-width-windows nil)
#+end_src

** Don't beep. Don't visible-bell (fails on el capitan). Just blink the modeline on errors.
#+begin_src emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function (lambda ()
                           (invert-face 'mode-line)
                           (run-with-timer 0.05 nil 'invert-face 'mode-line)))
#+end_src

** Highlight current line
#+begin_src emacs-lisp
(global-hl-line-mode 1)
(setq css-fontify-colors nil)
#+end_src

** Set custom theme path
#+begin_src emacs-lisp
(setq custom-theme-directory (concat user-emacs-directory "themes"))

(dolist
    (path (directory-files custom-theme-directory t "\\w+"))
  (when (file-directory-p path)
    (add-to-list 'custom-theme-load-path path)))
#+end_src

** Default theme
#+begin_src emacs-lisp
(defun use-presentation-theme ()
  (interactive)
  (when (boundp 'magnars/presentation-font)
    (set-face-attribute 'default nil :font mfic/presentation-font)))

(defun use-default-theme ()
  (interactive)
  (load-theme 'default-black)
  (when (boundp 'magnars/default-font)
    (set-face-attribute 'default nil :font mfic/default-font)))

(defun toggle-presentation-mode ()
  (interactive)
  (if (string= (frame-parameter nil 'font) mfic/default-font)
      (use-presentation-theme)
    (use-default-theme)))

(global-set-key (kbd "C-<f9>") 'toggle-presentation-mode)

(use-default-theme)
#+end_src

** Don't defer screen updates when performing operations
#+begin_src emacs-lisp
(setq redisplay-dont-pause t)
#+end_src

** org-mode colors
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(
        ("INPR" . (:foreground "yellow" :weight bold))
        ("DONE" . (:foreground "green" :weight bold))
        ("IMPEDED" . (:foreground "red" :weight bold))
        ))
#+end_src

** Highlight matching parentheses when the point is on them.
#+begin_src emacs-lisp
(show-paren-mode 1)

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode -1)
  (blink-cursor-mode -1))
#+end_src

** Make zooming affect frame instead of buffers
#+begin_src emacs-lisp
(require 'zoom-frm)

(defun enable-zoom-one-shot-keybindings ()
  (set-transient-map
   (let ((map (make-sparse-keymap)))
     (define-key map (kbd "+") 'zoom-frm-in)
     (define-key map (kbd "-") 'zoom-frm-out)
     (define-key map (kbd "0") 'zoom-frm-unzoom)
     map) t))

(defun zoom-frame-in ()
  (interactive)
  (zoom-frm-in)
  (enable-zoom-one-shot-keybindings))

(defun zoom-frame-out ()
  (interactive)
  (zoom-frm-out)
  (enable-zoom-one-shot-keybindings))

(global-set-key (kbd "C-x +") 'zoom-frame-in)
(global-set-key (kbd "C-x -") 'zoom-frame-out)
(global-set-key (kbd "C-x C-0") 'zoom-frm-unzoom)

(defmacro rename-modeline (package-name mode new-name)
  `(eval-after-load ,package-name
     '(defadvice ,mode (after rename-modeline activate)
        (setq mode-name ,new-name))))
#+end_src

* Settings for currently logged in user
#+begin_src emacs-lisp
(setq user-settings-dir
      (concat user-emacs-directory "users/" user-login-name))
(add-to-list 'load-path user-settings-dir)
#+end_src

* Add external projects to load path
#+begin_src emacs-lisp
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+end_src

* Write backup file to own directory
#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
#+end_src

* Write all autosave files in tmp dir
#+begin_src emacs-lisp
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

* Don't write lock file
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

* Make backup of files
#+begin_src emacs-lisp
(setq vc-make-backup-files t)
#+end_src

* Save point position between sessions
#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+end_src

* Set OS
** MacOS
#+begin_src emacs-lisp
(setq is-mac (equal system-type 'darwin))
#+end_src

** Windows
#+begin_src emacs-lisp
(setq is-win (equal system-type 'windows-nt))
#+end_src

** Linux
#+begin_src emacs-lisp
(setq is-linux (equal system-type 'gnu/linux))
#+end_src
* Setup packages
#+begin_src emacs-lisp
(require 'package)
(require 'dash)

;; Add melpa to package repos
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)

(setq package-pinned-packages '())

;; (package-initialize)

(unless (file-exists-p "~/.emacs.d/elpa/archives/melpa")
  (package-refresh-contents))

(defun packages-install (packages)
  (--each packages
    (when (not (package-installed-p it))
      (package-install it)))
  (delete-other-windows))

;;; On-demand installation of packages

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (if (package-installed-p package min-version)
      t
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))
#+end_src

* Install extentions if they are missing
#+begin_src emacs-lisp
(defun init--install-packages()
  (packages-install
    '(
      magit
      )))

(condition-case nil
    (init--install-packages)
  (error
    (package-refresh-contents)
    (init--install-packages)))
#+end_src

* Loading sane-defaults
** Allow pasting selection outside of Emacs
#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
#+end_src

** Auto refresh buffers
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src
.
** Also auto refresh dired, but be quiet about it
#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

** Show keystrokes in progress
#+begin_src emacs-lisp
(setq echo-keystrokes 0.1)
#+end_src

** Move files to trash when deleting
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src

** Real emacs knights don't use shift to mark things
#+begin_src emacs-lisp
(setq shift-select-mode nil)
#+end_src

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Enable syntax highlighting for older Emacsen that have it off
#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

** Answering just 'y' or 'n' will do
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** UTF-8 please
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
#+end_src

** Show active region
#+begin_src emacs-lisp
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)
#+end_src

** Remove text in active region if inserting text
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

** Don't highlight matches with jump-char - it's distracting
#+begin_src emacs-lisp
(setq jump-char-lazy-highlight-face nil)
#+end_src

** Always display line and column numbers
#+begin_src emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+end_src

** Lines should be 80 characters wide, not 72
#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src

** Save a list of recent files visited. (open recent file with C-x f)
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-saved-items 100) ;; just 20 is too recent
#+end_src

** Save minibuffer history
#+begin_src emacs-lisp
(savehist-mode 1)
(setq history-length 1000)
#+end_src

** Undo/redo window configuration with C-c <left>/<right>
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

** Never insert tabs
#+begin_src emacs-lisp
(set-default 'indent-tabs-mode nil)
#+end_src

** Show me empty lines after buffer end
#+begin_src emacs-lisp
(set-default 'indicate-empty-lines t)
#+end_src

** Easily navigate sillycased words
#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

** Don't break lines for me, please
#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src

** Keep cursor away from edges when scrolling up/down
#+begin_src emacs-lisp
(require 'smooth-scrolling)
#+end_src

** Allow recursive minibuffers
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

** Don't be so stingy on the memory, we have lots now. It's the distant future.
#+begin_src emacs-lisp
(setq gc-cons-threshold 20000000)
#+end_src

** org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
#+begin_src emacs-lisp
(setq org-replace-disputed-keys t)
#+end_src

** Fontify org-mode code blocks
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

** Represent undo-history as an actual tree (visualize with C-x u)
#+begin_src emacs-lisp
(setq undo-tree-mode-lighter "")
(require 'undo-tree)
(global-undo-tree-mode)
#+end_src

** Sentences do not need double spaces to end. Period.
#+begin_src emacs-lisp
(set-default 'sentence-end-double-space nil)
#+end_src

** 80 chars is a good width.
#+begin_src emacs-lisp
(set-default 'fill-column 80)
#+end_src

** Add parts of each file's directory to the buffer name if not unique
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

** A saner ediff
#+begin_src emacs-lisp
(setq ediff-diff-options "-w")
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

** No electric indent
#+begin_src emacs-lisp
(setq electric-indent-mode nil)
#+end_src

** Nic says eval-expression-print-level needs to be set to nil (turned off) so
that you can always see what's happening. Nic is wrong.
#+begin_src emacs-lisp
(setq eval-expression-print-level 100)
#+end_src

** When popping the mark, continue popping until the cursor actually moves
Also, if the last command was a copy - skip past all the expand-region cruft.
#+begin_src emacs-lisp
(defadvice pop-to-mark-command (around ensure-new-position activate)
  (let ((p (point)))
    (when (eq last-command 'save-region-or-current-line)
      ad-do-it
      ad-do-it
      ad-do-it)
    (dotimes (i 10)
      (when (= p (point)) ad-do-it))))

(setq set-mark-command-repeat-pop t)
#+end_src

** Offer to create parent directories if they do not exist
http://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/
#+begin_src emacs-lisp
(defun my-create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions 'my-create-non-existent-directory)
#+end_src
* Keybindings
** General
I don't need to kill emacs that easily
the mnemonic is C-x REALLY QUIT
#+begin_src eamacs-lisp
(global-set-key (kbd "C-x r q") 'save-buffers-kill-terminal)
(global-set-key (kbd "C-x C-c") 'delete-frame)
#+end_src
